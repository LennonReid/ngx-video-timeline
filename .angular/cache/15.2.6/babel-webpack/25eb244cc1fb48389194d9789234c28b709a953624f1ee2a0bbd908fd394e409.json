{"ast":null,"code":"import { ReplaySubject } from '../ReplaySubject';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n  let config;\n  if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n    config = configOrBufferSize;\n  } else {\n    config = {\n      bufferSize: configOrBufferSize,\n      windowTime,\n      refCount: false,\n      scheduler\n    };\n  }\n  return source => source.lift(shareReplayOperator(config));\n}\nfunction shareReplayOperator({\n  bufferSize = Number.POSITIVE_INFINITY,\n  windowTime = Number.POSITIVE_INFINITY,\n  refCount: useRefCount,\n  scheduler\n}) {\n  let subject;\n  let refCount = 0;\n  let subscription;\n  let hasError = false;\n  let isComplete = false;\n  return function shareReplayOperation(source) {\n    refCount++;\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n      subscription = source.subscribe({\n        next(value) {\n          subject.next(value);\n        },\n        error(err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete() {\n          isComplete = true;\n          subscription = undefined;\n          subject.complete();\n        }\n      });\n    }\n    const innerSub = subject.subscribe(this);\n    this.add(() => {\n      refCount--;\n      innerSub.unsubscribe();\n      if (subscription && !isComplete && useRefCount && refCount === 0) {\n        subscription.unsubscribe();\n        subscription = undefined;\n        subject = undefined;\n      }\n    });\n  };\n}","map":{"version":3,"names":["ReplaySubject","shareReplay","configOrBufferSize","windowTime","scheduler","config","bufferSize","refCount","source","lift","shareReplayOperator","Number","POSITIVE_INFINITY","useRefCount","subject","subscription","hasError","isComplete","shareReplayOperation","subscribe","next","value","error","err","complete","undefined","innerSub","add","unsubscribe"],"sources":["/Users/mac/lenon/repositories/ngx-video-timeline/node_modules/rxjs/_esm2015/internal/operators/shareReplay.js"],"sourcesContent":["import { ReplaySubject } from '../ReplaySubject';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n    let config;\n    if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n        config = configOrBufferSize;\n    }\n    else {\n        config = {\n            bufferSize: configOrBufferSize,\n            windowTime,\n            refCount: false,\n            scheduler\n        };\n    }\n    return (source) => source.lift(shareReplayOperator(config));\n}\nfunction shareReplayOperator({ bufferSize = Number.POSITIVE_INFINITY, windowTime = Number.POSITIVE_INFINITY, refCount: useRefCount, scheduler }) {\n    let subject;\n    let refCount = 0;\n    let subscription;\n    let hasError = false;\n    let isComplete = false;\n    return function shareReplayOperation(source) {\n        refCount++;\n        if (!subject || hasError) {\n            hasError = false;\n            subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n            subscription = source.subscribe({\n                next(value) { subject.next(value); },\n                error(err) {\n                    hasError = true;\n                    subject.error(err);\n                },\n                complete() {\n                    isComplete = true;\n                    subscription = undefined;\n                    subject.complete();\n                },\n            });\n        }\n        const innerSub = subject.subscribe(this);\n        this.add(() => {\n            refCount--;\n            innerSub.unsubscribe();\n            if (subscription && !isComplete && useRefCount && refCount === 0) {\n                subscription.unsubscribe();\n                subscription = undefined;\n                subject = undefined;\n            }\n        });\n    };\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAChD,OAAO,SAASC,WAAWA,CAACC,kBAAkB,EAAEC,UAAU,EAAEC,SAAS,EAAE;EACnE,IAAIC,MAAM;EACV,IAAIH,kBAAkB,IAAI,OAAOA,kBAAkB,KAAK,QAAQ,EAAE;IAC9DG,MAAM,GAAGH,kBAAkB;EAC/B,CAAC,MACI;IACDG,MAAM,GAAG;MACLC,UAAU,EAAEJ,kBAAkB;MAC9BC,UAAU;MACVI,QAAQ,EAAE,KAAK;MACfH;IACJ,CAAC;EACL;EACA,OAAQI,MAAM,IAAKA,MAAM,CAACC,IAAI,CAACC,mBAAmB,CAACL,MAAM,CAAC,CAAC;AAC/D;AACA,SAASK,mBAAmBA,CAAC;EAAEJ,UAAU,GAAGK,MAAM,CAACC,iBAAiB;EAAET,UAAU,GAAGQ,MAAM,CAACC,iBAAiB;EAAEL,QAAQ,EAAEM,WAAW;EAAET;AAAU,CAAC,EAAE;EAC7I,IAAIU,OAAO;EACX,IAAIP,QAAQ,GAAG,CAAC;EAChB,IAAIQ,YAAY;EAChB,IAAIC,QAAQ,GAAG,KAAK;EACpB,IAAIC,UAAU,GAAG,KAAK;EACtB,OAAO,SAASC,oBAAoBA,CAACV,MAAM,EAAE;IACzCD,QAAQ,EAAE;IACV,IAAI,CAACO,OAAO,IAAIE,QAAQ,EAAE;MACtBA,QAAQ,GAAG,KAAK;MAChBF,OAAO,GAAG,IAAId,aAAa,CAACM,UAAU,EAAEH,UAAU,EAAEC,SAAS,CAAC;MAC9DW,YAAY,GAAGP,MAAM,CAACW,SAAS,CAAC;QAC5BC,IAAIA,CAACC,KAAK,EAAE;UAAEP,OAAO,CAACM,IAAI,CAACC,KAAK,CAAC;QAAE,CAAC;QACpCC,KAAKA,CAACC,GAAG,EAAE;UACPP,QAAQ,GAAG,IAAI;UACfF,OAAO,CAACQ,KAAK,CAACC,GAAG,CAAC;QACtB,CAAC;QACDC,QAAQA,CAAA,EAAG;UACPP,UAAU,GAAG,IAAI;UACjBF,YAAY,GAAGU,SAAS;UACxBX,OAAO,CAACU,QAAQ,EAAE;QACtB;MACJ,CAAC,CAAC;IACN;IACA,MAAME,QAAQ,GAAGZ,OAAO,CAACK,SAAS,CAAC,IAAI,CAAC;IACxC,IAAI,CAACQ,GAAG,CAAC,MAAM;MACXpB,QAAQ,EAAE;MACVmB,QAAQ,CAACE,WAAW,EAAE;MACtB,IAAIb,YAAY,IAAI,CAACE,UAAU,IAAIJ,WAAW,IAAIN,QAAQ,KAAK,CAAC,EAAE;QAC9DQ,YAAY,CAACa,WAAW,EAAE;QAC1Bb,YAAY,GAAGU,SAAS;QACxBX,OAAO,GAAGW,SAAS;MACvB;IACJ,CAAC,CAAC;EACN,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}